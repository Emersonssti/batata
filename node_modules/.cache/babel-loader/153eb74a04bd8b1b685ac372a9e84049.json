{"ast":null,"code":"import CryptoJS from \"crypto-js\";\n/**\n * Function Encrypto\n * @param {any} decrypted\n * @returns {string}\n */\n\nexport function enCrypto(decrypted) {\n  let message = \"\";\n\n  switch (typeof decrypted) {\n    case \"object\":\n      message = JSON.stringify(decrypted);\n      break;\n\n    case \"string\":\n      message = decrypted;\n      break;\n\n    default:\n      message = String(decrypted);\n  }\n\n  const messageHex = CryptoJS.enc.Utf8.parse(message);\n  const encrypted = CryptoJS.AES.encrypt(messageHex, {\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return encrypted.toString();\n}\n/**\n * Function Decrypto\n * @param {string} encrypted\n * @returns {string}\n */\n\nexport function deCrypto(encrypted) {\n  const decrypt = CryptoJS.AES.decrypt(encrypted, {\n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7\n  });\n  return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}","map":{"version":3,"sources":["/home/arthur.donato/Documentos/ProjetoClash/batata/src/utils/Validator/Crypt/index.js"],"names":["CryptoJS","enCrypto","decrypted","message","JSON","stringify","String","messageHex","enc","Utf8","parse","encrypted","AES","encrypt","mode","CBC","padding","pad","Pkcs7","toString","deCrypto","decrypt"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAClC,MAAIC,OAAO,GAAG,EAAd;;AAEA,UAAQ,OAAOD,SAAf;AACE,SAAK,QAAL;AACEC,MAAAA,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeH,SAAf,CAAV;AACA;;AACF,SAAK,QAAL;AACEC,MAAAA,OAAO,GAAGD,SAAV;AACA;;AACF;AACEC,MAAAA,OAAO,GAAGG,MAAM,CAACJ,SAAD,CAAhB;AARJ;;AAYA,QAAMK,UAAU,GAAGP,QAAQ,CAACQ,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBP,OAAxB,CAAnB;AACA,QAAMQ,SAAS,GAAGX,QAAQ,CAACY,GAAT,CAAaC,OAAb,CAAqBN,UAArB,EAAiC;AAEjDO,IAAAA,IAAI,EAAEd,QAAQ,CAACc,IAAT,CAAcC,GAF6B;AAGjDC,IAAAA,OAAO,EAAEhB,QAAQ,CAACiB,GAAT,CAAaC;AAH2B,GAAjC,CAAlB;AAMA,SAAOP,SAAS,CAACQ,QAAV,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBT,SAAlB,EAA6B;AAClC,QAAMU,OAAO,GAAGrB,QAAQ,CAACY,GAAT,CAAaS,OAAb,CAAqBV,SAArB,EAA+B;AAC7CG,IAAAA,IAAI,EAAEd,QAAQ,CAACc,IAAT,CAAcC,GADyB;AAE7CC,IAAAA,OAAO,EAAEhB,QAAQ,CAACiB,GAAT,CAAaC;AAFuB,GAA/B,CAAhB;AAKA,SAAOd,IAAI,CAACM,KAAL,CAAWW,OAAO,CAACF,QAAR,CAAiBnB,QAAQ,CAACQ,GAAT,CAAaC,IAA9B,CAAX,CAAP;AACD","sourcesContent":["import CryptoJS from \"crypto-js\";\n\n/**\n * Function Encrypto\n * @param {any} decrypted\n * @returns {string}\n */\nexport function enCrypto(decrypted) {\n  let message = \"\";\n\n  switch (typeof decrypted) {\n    case \"object\":\n      message = JSON.stringify(decrypted);\n      break;\n    case \"string\":\n      message = decrypted;\n      break;\n    default:\n      message = String(decrypted);\n  }\n\n  \n  const messageHex = CryptoJS.enc.Utf8.parse(message);\n  const encrypted = CryptoJS.AES.encrypt(messageHex, {\n   \n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7,\n  });\n\n  return encrypted.toString();\n}\n\n/**\n * Function Decrypto\n * @param {string} encrypted\n * @returns {string}\n */\nexport function deCrypto(encrypted) {  \n  const decrypt = CryptoJS.AES.decrypt(encrypted,{  \n    mode: CryptoJS.mode.CBC,\n    padding: CryptoJS.pad.Pkcs7,\n  });\n\n  return JSON.parse(decrypt.toString(CryptoJS.enc.Utf8));\n}\n"]},"metadata":{},"sourceType":"module"}