{"ast":null,"code":"import passwordValidator from \"password-validator\";\n/**\n * Function Validator Password\n * @param {string} password\n */\n\nexport function validatorPassword(password) {\n  let schema = new passwordValidator();\n\n  if (!schema.is().min(8).validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha deve ter no mínimo 8 caracteres!\"\n    };\n  }\n\n  if (!schema.has().uppercase().validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha deve ter letras maiúsculas!\"\n    };\n  }\n\n  if (!schema.has().lowercase().validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha deve ter letras minúsculas!\"\n    };\n  }\n\n  if (!schema.has().digits(2).validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha deve ter pelo menos 2 números!\"\n    };\n  }\n\n  if (!schema.has().not().spaces().validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha não deve ter espaços!\"\n    };\n  }\n\n  return {\n    status: true,\n    password: password\n  };\n}\n/**\n * Function Validator Identical Password\n * @param {string} password\n * @param {string} confirmPassword\n */\n\nexport function validatorIdenticalPassword(password, confirmPassword) {\n  if (password !== confirmPassword) {\n    return {\n      status: false,\n      message: \"Ops, as senhas não conferem. Verifique os campos e tente novamente!\"\n    };\n  }\n\n  return {\n    status: true,\n    password: password\n  };\n}","map":{"version":3,"sources":["/home/arthur.donato/Documentos/ProjetoClash/batata/src/utils/Validator/Password/index.js"],"names":["passwordValidator","validatorPassword","password","schema","is","min","validate","status","message","has","uppercase","lowercase","digits","not","spaces","validatorIdenticalPassword","confirmPassword"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,oBAA9B;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AAC1C,MAAIC,MAAM,GAAG,IAAIH,iBAAJ,EAAb;;AAEA,MAAI,CAACG,MAAM,CAACC,EAAP,GAAYC,GAAZ,CAAgB,CAAhB,EAAmBC,QAAnB,CAA4BJ,QAA5B,CAAL,EAA4C;AAC1C,WAAO;AACLK,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,OAAO,EAAE;AAFJ,KAAP;AAID;;AAED,MAAI,CAACL,MAAM,CAACM,GAAP,GAAaC,SAAb,GAAyBJ,QAAzB,CAAkCJ,QAAlC,CAAL,EAAkD;AAChD,WAAO;AACLK,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,OAAO,EAAE;AAFJ,KAAP;AAID;;AAED,MAAI,CAACL,MAAM,CAACM,GAAP,GAAaE,SAAb,GAAyBL,QAAzB,CAAkCJ,QAAlC,CAAL,EAAkD;AAChD,WAAO;AACLK,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,OAAO,EAAE;AAFJ,KAAP;AAID;;AAED,MAAI,CAACL,MAAM,CAACM,GAAP,GAAaG,MAAb,CAAoB,CAApB,EAAuBN,QAAvB,CAAgCJ,QAAhC,CAAL,EAAgD;AAC9C,WAAO;AACLK,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,OAAO,EAAE;AAFJ,KAAP;AAID;;AAED,MAAI,CAACL,MAAM,CAACM,GAAP,GAAaI,GAAb,GAAmBC,MAAnB,GAA4BR,QAA5B,CAAqCJ,QAArC,CAAL,EAAqD;AACnD,WAAO;AAAEK,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAAP;AACD;;AAED,SAAO;AAAED,IAAAA,MAAM,EAAE,IAAV;AAAgBL,IAAAA,QAAQ,EAAEA;AAA1B,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,0BAAT,CAAoCb,QAApC,EAA8Cc,eAA9C,EAA+D;AACpE,MAAId,QAAQ,KAAKc,eAAjB,EAAkC;AAChC,WAAO;AACLT,MAAAA,MAAM,EAAE,KADH;AAELC,MAAAA,OAAO,EACL;AAHG,KAAP;AAKD;;AAED,SAAO;AAAED,IAAAA,MAAM,EAAE,IAAV;AAAgBL,IAAAA,QAAQ,EAAEA;AAA1B,GAAP;AACD","sourcesContent":["import passwordValidator from \"password-validator\";\n\n/**\n * Function Validator Password\n * @param {string} password\n */\nexport function validatorPassword(password) {\n  let schema = new passwordValidator();\n\n  if (!schema.is().min(8).validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha deve ter no mínimo 8 caracteres!\",\n    };\n  }\n\n  if (!schema.has().uppercase().validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha deve ter letras maiúsculas!\",\n    };\n  }\n\n  if (!schema.has().lowercase().validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha deve ter letras minúsculas!\",\n    };\n  }\n\n  if (!schema.has().digits(2).validate(password)) {\n    return {\n      status: false,\n      message: \"Ops, sua senha deve ter pelo menos 2 números!\",\n    };\n  }\n\n  if (!schema.has().not().spaces().validate(password)) {\n    return { status: false, message: \"Ops, sua senha não deve ter espaços!\" };\n  }\n\n  return { status: true, password: password };\n}\n\n/**\n * Function Validator Identical Password\n * @param {string} password\n * @param {string} confirmPassword\n */\nexport function validatorIdenticalPassword(password, confirmPassword) {\n  if (password !== confirmPassword) {\n    return {\n      status: false,\n      message:\n        \"Ops, as senhas não conferem. Verifique os campos e tente novamente!\",\n    };\n  }\n\n  return { status: true, password: password };\n}\n"]},"metadata":{},"sourceType":"module"}