{"ast":null,"code":"var _jsxFileName = \"/home/arthur.donato/Documentos/ProjetoClash/batata/src/components/Modal/RecoveryPassword/index.js\";\nimport React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport { ModalTemplate, FormSendEmail, FormSuccessEmail, FormSendPassword, FormSuccessPassword, Loader, AlertsErrors } from \"../../../components\";\nimport { validatorEmail, validatorPassword, validatorIdenticalPassword } from \"../../../utils\";\nimport { sendForgotPassword, sendChangePassword } from \"../../../services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class ModalRecoveryPassword extends Component {\n  /**\n   * Constructor\n   * @param {obj} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayModal: false,\n      displayFormSendEmail: false,\n      displayFormSuccessEmail: false,\n      displayFormSendPassword: false,\n      displayFormSuccessPassword: false,\n      loader: false,\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      errorMessage: \"\",\n      resetPassword: \"\",\n      flowRecoveryPassword: false\n    };\n    this.baseState = this.state;\n  }\n  /**\n   * Component Did Mount\n   */\n\n\n  componentDidMount() {\n    this.getHashValidator();\n    this.getProps();\n  }\n  /**\n   * Function Get Props\n   */\n\n\n  getProps() {\n    if (this.props.flowRecoveryPassword) {\n      this.setState({\n        flowRecoveryPassword: true\n      });\n      return;\n    }\n  }\n  /**\n   * Function Get Hash Validator\n   */\n\n\n  async getHashValidator() {\n    const url = queryString.parse(window.location.search);\n\n    if (url.resetPassword) {\n      this.setState({\n        displayModal: true,\n        displayFormSendPassword: true,\n        resetPassword: url.resetPassword\n      });\n    }\n  }\n  /**\n   * Function On Click Button Modal\n   */\n\n\n  onClickButtonModal(event, status) {\n    event.preventDefault();\n    const {\n      flowRecoveryPassword\n    } = this.state;\n\n    if (!status) {\n      this.setState({\n        displayModal: false,\n        displayFormSendEmail: false,\n        displayFormSuccessEmail: false,\n        displayFormSendPassword: false,\n        displayFormSuccessPassword: false,\n        loader: false,\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        errorMessage: \"\",\n        hash: \"\"\n      });\n      return;\n    }\n\n    if (flowRecoveryPassword) {\n      this.setState({\n        displayModal: true,\n        displayFormSendPassword: true\n      });\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormSendEmail: true\n    });\n  }\n  /**\n   * Function Handle Change Form Send Email\n   * @param {obj} event\n   */\n\n\n  handleChangeFormSendEmail(event) {\n    this.setState({\n      email: event.target.value,\n      errorMessage: \"\"\n    });\n  }\n  /**\n   * Function Handle Submit Form Send Email\n   * @param {obj} event\n   */\n\n\n  async handleSubmitFormSendEmail(event) {\n    event.preventDefault();\n    const {\n      email\n    } = this.state;\n    const validator = validatorEmail(email);\n\n    if (!validator.status) {\n      this.setState({\n        errorMessage: validator.message\n      });\n      return;\n    }\n\n    this.setState({\n      loader: true\n    });\n    const sendFormEmail = await sendForgotPassword(validator.email);\n\n    if (!sendFormEmail.status) {\n      this.setState({\n        errorMessage: sendFormEmail.message,\n        loader: false\n      });\n      return;\n    }\n\n    this.setState({\n      loader: false,\n      displayFormSendEmail: false,\n      displayFormSuccessEmail: true\n    });\n  }\n  /**\n   * Function Handle Change Form Send Password\n   * @param {obj} event\n   */\n\n\n  handleChangeFormSendPassword(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      errorMessage: \"\"\n    });\n  }\n  /**\n   * Function Handle Submit Form Send Password\n   * @param {obj} event\n   */\n\n\n  async handleSubmitFormSendPassword(event) {\n    event.preventDefault();\n    const {\n      password,\n      confirmPassword,\n      resetPassword\n    } = this.state;\n    const validatorIdenticalPass = validatorIdenticalPassword(password, confirmPassword);\n\n    if (!validatorIdenticalPass.status) {\n      this.setState({\n        errorMessage: validatorIdenticalPass.message\n      });\n      return;\n    }\n\n    const validatePassword = validatorPassword(password);\n\n    if (!validatePassword.status) {\n      this.setState({\n        errorMessage: validatePassword.message\n      });\n      return;\n    }\n\n    this.setState({\n      loader: true\n    });\n    const sendPassConfirmPass = await sendChangePassword(resetPassword, validatePassword.password);\n\n    if (!sendPassConfirmPass.status) {\n      this.setState({\n        errorMessage: sendPassConfirmPass.message,\n        loader: false\n      });\n      return;\n    }\n\n    this.setState({\n      displayFormSendPassword: false,\n      displayFormSuccessPassword: true,\n      loader: false\n    });\n  }\n  /**\n   * Render Component\n   */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.flowRecoveryPassword ? /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/#\",\n        onClick: event => this.onClickButtonModal(event, true),\n        className: \"bt-plan\",\n        children: \"Trocar minha senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: event => this.onClickButtonModal(event, true),\n        href: \"/#\",\n        className: \"recover-pass\",\n        children: \"Esqueci minha senha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), this.state.displayModal !== false && /*#__PURE__*/_jsxDEV(ModalTemplate, {\n        children: [/*#__PURE__*/_jsxDEV(Loader, {\n          display: this.state.loader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), this.state.displayFormSendEmail !== false && /*#__PURE__*/_jsxDEV(FormSendEmail, {\n          email: this.state.email,\n          displayFormSendEmail: this.state.displayFormSendEmail,\n          onChange: event => this.handleChangeFormSendEmail(event),\n          onSubmit: event => this.handleSubmitFormSendEmail(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }, this), this.state.displayFormSuccessEmail !== false && /*#__PURE__*/_jsxDEV(FormSuccessEmail, {\n          email: this.state.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }, this), this.state.displayFormSendPassword !== false && /*#__PURE__*/_jsxDEV(FormSendPassword, {\n          password: this.state.password,\n          confirmPassword: this.state.confirmPassword,\n          onChange: event => this.handleChangeFormSendPassword(event),\n          onSubmit: event => this.handleSubmitFormSendPassword(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }, this), this.state.displayFormSuccessPassword !== false && /*#__PURE__*/_jsxDEV(FormSuccessPassword, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }, this), this.state.errorMessage !== \"\" && /*#__PURE__*/_jsxDEV(AlertsErrors, {\n          message: this.state.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/#\",\n          className: \"bt-register\",\n          onClick: event => this.onClickButtonModal(event, false),\n          children: \"Voltar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/home/arthur.donato/Documentos/ProjetoClash/batata/src/components/Modal/RecoveryPassword/index.js"],"names":["React","Component","queryString","ModalTemplate","FormSendEmail","FormSuccessEmail","FormSendPassword","FormSuccessPassword","Loader","AlertsErrors","validatorEmail","validatorPassword","validatorIdenticalPassword","sendForgotPassword","sendChangePassword","ModalRecoveryPassword","constructor","props","state","displayModal","displayFormSendEmail","displayFormSuccessEmail","displayFormSendPassword","displayFormSuccessPassword","loader","email","password","confirmPassword","errorMessage","resetPassword","flowRecoveryPassword","baseState","componentDidMount","getHashValidator","getProps","setState","url","parse","window","location","search","onClickButtonModal","event","status","preventDefault","hash","handleChangeFormSendEmail","target","value","handleSubmitFormSendEmail","validator","message","sendFormEmail","handleChangeFormSendPassword","name","handleSubmitFormSendPassword","validatorIdenticalPass","validatePassword","sendPassConfirmPass","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport queryString from \"query-string\";\n\nimport {\n  ModalTemplate,\n  FormSendEmail,\n  FormSuccessEmail,\n  FormSendPassword,\n  FormSuccessPassword,\n  Loader,\n  AlertsErrors,\n} from \"../../../components\";\n\nimport {\n  validatorEmail,\n  validatorPassword,\n  validatorIdenticalPassword,\n} from \"../../../utils\";\n\nimport { sendForgotPassword, sendChangePassword } from \"../../../services\";\n\nexport default class ModalRecoveryPassword extends Component {\n  /**\n   * Constructor\n   * @param {obj} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayModal: false,\n      displayFormSendEmail: false,\n      displayFormSuccessEmail: false,\n      displayFormSendPassword: false,\n      displayFormSuccessPassword: false,\n      loader: false,\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      errorMessage: \"\",\n      resetPassword: \"\",\n      flowRecoveryPassword: false,\n    };\n\n    this.baseState = this.state;\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {\n    this.getHashValidator();\n    this.getProps();\n  }\n\n  /**\n   * Function Get Props\n   */\n  getProps() {\n    if (this.props.flowRecoveryPassword) {\n      this.setState({\n        flowRecoveryPassword: true,\n      });\n      return;\n    }\n  }\n\n  /**\n   * Function Get Hash Validator\n   */\n  async getHashValidator() {\n    const url = queryString.parse(window.location.search);\n    if (url.resetPassword) {\n      this.setState({\n        displayModal: true,\n        displayFormSendPassword: true,\n        resetPassword: url.resetPassword,\n      });\n    }\n  }\n\n  /**\n   * Function On Click Button Modal\n   */\n  onClickButtonModal(event, status) {\n    event.preventDefault();\n\n    const { flowRecoveryPassword } = this.state;\n\n    if (!status) {\n      this.setState({\n        displayModal: false,\n        displayFormSendEmail: false,\n        displayFormSuccessEmail: false,\n        displayFormSendPassword: false,\n        displayFormSuccessPassword: false,\n        loader: false,\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        errorMessage: \"\",\n        hash: \"\",\n      });\n      return;\n    }\n\n    if (flowRecoveryPassword) {\n      this.setState({\n        displayModal: true,\n        displayFormSendPassword: true,\n      });\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormSendEmail: true,\n    });\n  }\n\n  /**\n   * Function Handle Change Form Send Email\n   * @param {obj} event\n   */\n  handleChangeFormSendEmail(event) {\n    this.setState({ email: event.target.value, errorMessage: \"\" });\n  }\n\n  /**\n   * Function Handle Submit Form Send Email\n   * @param {obj} event\n   */\n  async handleSubmitFormSendEmail(event) {\n    event.preventDefault();\n\n    const { email } = this.state;\n\n    const validator = validatorEmail(email);\n\n    if (!validator.status) {\n      this.setState({ errorMessage: validator.message });\n      return;\n    }\n\n    this.setState({ loader: true });\n\n    const sendFormEmail = await sendForgotPassword(validator.email);\n\n    if (!sendFormEmail.status) {\n      this.setState({ errorMessage: sendFormEmail.message, loader: false });\n      return;\n    }\n\n    this.setState({\n      loader: false,\n      displayFormSendEmail: false,\n      displayFormSuccessEmail: true,\n    });\n  }\n\n  /**\n   * Function Handle Change Form Send Password\n   * @param {obj} event\n   */\n  handleChangeFormSendPassword(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      errorMessage: \"\",\n    });\n  }\n\n  /**\n   * Function Handle Submit Form Send Password\n   * @param {obj} event\n   */\n  async handleSubmitFormSendPassword(event) {\n    event.preventDefault();\n\n    const { password, confirmPassword, resetPassword } = this.state;\n\n    const validatorIdenticalPass = validatorIdenticalPassword(\n      password,\n      confirmPassword\n    );\n\n    if (!validatorIdenticalPass.status) {\n      this.setState({ errorMessage: validatorIdenticalPass.message });\n      return;\n    }\n\n    const validatePassword = validatorPassword(password);\n\n    if (!validatePassword.status) {\n      this.setState({ errorMessage: validatePassword.message });\n      return;\n    }\n\n    this.setState({ loader: true });\n\n    const sendPassConfirmPass = await sendChangePassword(\n      resetPassword,\n      validatePassword.password\n    );\n\n    if (!sendPassConfirmPass.status) {\n      this.setState({\n        errorMessage: sendPassConfirmPass.message,\n        loader: false,\n      });\n      return;\n    }\n\n    this.setState({\n      displayFormSendPassword: false,\n      displayFormSuccessPassword: true,\n      loader: false,\n    });\n  }\n\n  /**\n   * Render Component\n   */\n  render() {\n    return (\n      <>\n        {this.state.flowRecoveryPassword ? (\n          <a\n            href=\"/#\"\n            onClick={(event) => this.onClickButtonModal(event, true)}\n            className=\"bt-plan\"\n          >\n            Trocar minha senha\n          </a>\n        ) : (\n          <a\n            onClick={(event) => this.onClickButtonModal(event, true)}\n            href=\"/#\"\n            className=\"recover-pass\"\n          >\n            Esqueci minha senha\n          </a>\n        )}\n\n        {this.state.displayModal !== false && (\n          <ModalTemplate>\n            <Loader display={this.state.loader} />\n\n            {this.state.displayFormSendEmail !== false && (\n              <FormSendEmail\n                email={this.state.email}\n                displayFormSendEmail={this.state.displayFormSendEmail}\n                onChange={(event) => this.handleChangeFormSendEmail(event)}\n                onSubmit={(event) => this.handleSubmitFormSendEmail(event)}\n              />\n            )}\n\n            {this.state.displayFormSuccessEmail !== false && (\n              <FormSuccessEmail email={this.state.email} />\n            )}\n\n            {this.state.displayFormSendPassword !== false && (\n              <FormSendPassword\n                password={this.state.password}\n                confirmPassword={this.state.confirmPassword}\n                onChange={(event) => this.handleChangeFormSendPassword(event)}\n                onSubmit={(event) => this.handleSubmitFormSendPassword(event)}\n              />\n            )}\n\n            {this.state.displayFormSuccessPassword !== false && (\n              <FormSuccessPassword />\n            )}\n\n            {this.state.errorMessage !== \"\" && (\n              <AlertsErrors message={this.state.errorMessage} />\n            )}\n\n            <a\n              href=\"/#\"\n              className=\"bt-register\"\n              onClick={(event) => this.onClickButtonModal(event, false)}\n            >\n              Voltar\n            </a>\n          </ModalTemplate>\n        )}\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}