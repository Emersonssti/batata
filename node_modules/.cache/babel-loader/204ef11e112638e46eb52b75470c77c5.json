{"ast":null,"code":"// import React, { Component } from \"react\";\n// import queryString from \"query-string\";\n// import {\n//   ModalTemplate,\n//   FormSendEmail,\n//   FormSuccesslEmail,\n//   FormSendPassword,\n//   FormSuccessPassword,\n//   Loader,\n//   AlertsErrors,\n// } from \"../../../components\";\n// import {\n//   validatorEmail,\n//   validatorPassword,\n//   validatorIdenticalPassword,\n// } from \"../../../utils\";\n// import { sendForgotPassword, sendChangePassword } from \"../../../services\";\n// export default class ModalRecoveryPassword extends Component {\n//   /**\n//    * Constructor\n//    * @param {obj} props\n//    */\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       displayModal: false,\n//       displayFormSendEmail: false,\n//       displayFormSuccessEmail: false,\n//       displayFormSendPassword: false,\n//       displayFormSuccessPassword: false,\n//       loader: false,\n//       email: \"\",\n//       password: \"\",\n//       confirmPassword: \"\",\n//       errorMessage: \"\",\n//       resetPassword: \"\",\n//       flowRecoveryPassword: false,\n//     };\n//     this.baseState = this.state;\n//   }\n//   /**\n//    * Component Did Mount\n//    */\n//   componentDidMount() {\n//     this.getHashValidator();\n//     this.getProps();\n//   }\n//   /**\n//    * Function Get Props\n//    */\n//   getProps() {\n//     if (this.props.flowRecoveryPassword) {\n//       this.setState({\n//         flowRecoveryPassword: true,\n//       });\n//       return;\n//     }\n//   }\n//   /**\n//    * Function Get Hash Validator\n//    */\n//   async getHashValidator() {\n//     const url = queryString.parse(window.location.search);\n//     if (url.resetPassword) {\n//       this.setState({\n//         displayModal: true,\n//         displayFormSendPassword: true,\n//         resetPassword: url.resetPassword,\n//       });\n//     }\n//   }\n//   /**\n//    * Function On Click Button Modal\n//    */\n//   onClickButtonModal(event, status) {\n//     event.preventDefault();\n//     const { flowRecoveryPassword } = this.state;\n//     if (!status) {\n//       this.setState({\n//         displayModal: false,\n//         displayFormSendEmail: false,\n//         displayFormSuccessEmail: false,\n//         displayFormSendPassword: false,\n//         displayFormSuccessPassword: false,\n//         loader: false,\n//         email: \"\",\n//         password: \"\",\n//         confirmPassword: \"\",\n//         errorMessage: \"\",\n//         hash: \"\",\n//       });\n//       return;\n//     }\n//     if (flowRecoveryPassword) {\n//       this.setState({\n//         displayModal: true,\n//         displayFormSendPassword: true,\n//       });\n//       return;\n//     }\n//     this.setState({\n//       displayModal: true,\n//       displayFormSendEmail: true,\n//     });\n//   }\n//   /**\n//    * Function Handle Change Form Send Email\n//    * @param {obj} event\n//    */\n//   handleChangeFormSendEmail(event) {\n//     this.setState({ email: event.target.value, errorMessage: \"\" });\n//   }\n//   /**\n//    * Function Handle Submit Form Send Email\n//    * @param {obj} event\n//    */\n//   async handleSubmitFormSendEmail(event) {\n//     event.preventDefault();\n//     const { email } = this.state;\n//     const validator = validatorEmail(email);\n//     if (!validator.status) {\n//       this.setState({ errorMessage: validator.message });\n//       return;\n//     }\n//     this.setState({ loader: true });\n//     const sendFormEmail = await sendForgotPassword(validator.email);\n//     if (!sendFormEmail.status) {\n//       this.setState({ errorMessage: sendFormEmail.message, loader: false });\n//       return;\n//     }\n//     this.setState({\n//       loader: false,\n//       displayFormSendEmail: false,\n//       displayFormSuccessEmail: true,\n//     });\n//   }\n//   /**\n//    * Function Handle Change Form Send Password\n//    * @param {obj} event\n//    */\n//   handleChangeFormSendPassword(event) {\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//       errorMessage: \"\",\n//     });\n//   }\n//   /**\n//    * Function Handle Submit Form Send Password\n//    * @param {obj} event\n//    */\n//   async handleSubmitFormSendPassword(event) {\n//     event.preventDefault();\n//     const { password, confirmPassword, resetPassword } = this.state;\n//     const validatorIdenticalPass = validatorIdenticalPassword(\n//       password,\n//       confirmPassword\n//     );\n//     if (!validatorIdenticalPass.status) {\n//       this.setState({ errorMessage: validatorIdenticalPass.message });\n//       return;\n//     }\n//     const validatePassword = validatorPassword(password);\n//     if (!validatePassword.status) {\n//       this.setState({ errorMessage: validatePassword.message });\n//       return;\n//     }\n//     this.setState({ loader: true });\n//     const sendPassConfirmPass = await sendChangePassword(\n//       resetPassword,\n//       validatePassword.password\n//     );\n//     if (!sendPassConfirmPass.status) {\n//       this.setState({\n//         errorMessage: sendPassConfirmPass.message,\n//         loader: false,\n//       });\n//       return;\n//     }\n//     this.setState({\n//       displayFormSendPassword: false,\n//       displayFormSuccessPassword: true,\n//       loader: false,\n//     });\n//   }\n//   /**\n//    * Render Component\n//    */\n//   render() {\n//     return (\n//       <>\n//         {this.state.flowRecoveryPassword ? (\n//           <a\n//             href=\"/#\"\n//             onClick={(event) => this.onClickButtonModal(event, true)}\n//             className=\"bt-plan\"\n//           >\n//             Trocar minha senha\n//           </a>\n//         ) : (\n//           <a\n//             onClick={(event) => this.onClickButtonModal(event, true)}\n//             href=\"/#\"\n//             className=\"recover-pass\"\n//           >\n//             Esqueci minha senha\n//           </a>\n//         )}\n//         {this.state.displayModal !== false && (\n//           <ModalTemplate>\n//             <Loader display={this.state.loader} />\n//             {this.state.displayFormSendEmail !== false && (\n//               <FormSendEmail\n//                 email={this.state.email}\n//                 displayFormSendEmail={this.state.displayFormSendEmail}\n//                 onChange={(event) => this.handleChangeFormSendEmail(event)}\n//                 onSubmit={(event) => this.handleSubmitFormSendEmail(event)}\n//               />\n//             )}\n//             {this.state.displayFormSuccessEmail !== false && (\n//               <FormSuccesslEmail email={this.state.email} />\n//             )}\n//             {this.state.displayFormSendPassword !== false && (\n//               <FormSendPassword\n//                 password={this.state.password}\n//                 confirmPassword={this.state.confirmPassword}\n//                 onChange={(event) => this.handleChangeFormSendPassword(event)}\n//                 onSubmit={(event) => this.handleSubmitFormSendPassword(event)}\n//               />\n//             )}\n//             {this.state.displayFormSuccessPassword !== false && (\n//               <FormSuccessPassword />\n//             )}\n//             {this.state.errorMessage !== \"\" && (\n//               <AlertsErrors message={this.state.errorMessage} />\n//             )}\n//             <a\n//               href=\"/#\"\n//               className=\"bt-register\"\n//               onClick={(event) => this.onClickButtonModal(event, false)}\n//             >\n//               Voltar\n//             </a>\n//           </ModalTemplate>\n//         )}\n//       </>\n//     );\n//   }\n// }","map":{"version":3,"sources":["/home/arthur.donato/Documentos/ProjetoClash/heroesclash/src/components/Modal/RecoveryPassword/index.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from \"react\";\n// import queryString from \"query-string\";\n\n// import {\n//   ModalTemplate,\n//   FormSendEmail,\n//   FormSuccesslEmail,\n//   FormSendPassword,\n//   FormSuccessPassword,\n//   Loader,\n//   AlertsErrors,\n// } from \"../../../components\";\n\n// import {\n//   validatorEmail,\n//   validatorPassword,\n//   validatorIdenticalPassword,\n// } from \"../../../utils\";\n\n// import { sendForgotPassword, sendChangePassword } from \"../../../services\";\n\n// export default class ModalRecoveryPassword extends Component {\n//   /**\n//    * Constructor\n//    * @param {obj} props\n//    */\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       displayModal: false,\n//       displayFormSendEmail: false,\n//       displayFormSuccessEmail: false,\n//       displayFormSendPassword: false,\n//       displayFormSuccessPassword: false,\n//       loader: false,\n//       email: \"\",\n//       password: \"\",\n//       confirmPassword: \"\",\n//       errorMessage: \"\",\n//       resetPassword: \"\",\n//       flowRecoveryPassword: false,\n//     };\n\n//     this.baseState = this.state;\n//   }\n\n//   /**\n//    * Component Did Mount\n//    */\n//   componentDidMount() {\n//     this.getHashValidator();\n//     this.getProps();\n//   }\n\n//   /**\n//    * Function Get Props\n//    */\n//   getProps() {\n//     if (this.props.flowRecoveryPassword) {\n//       this.setState({\n//         flowRecoveryPassword: true,\n//       });\n//       return;\n//     }\n//   }\n\n//   /**\n//    * Function Get Hash Validator\n//    */\n//   async getHashValidator() {\n//     const url = queryString.parse(window.location.search);\n//     if (url.resetPassword) {\n//       this.setState({\n//         displayModal: true,\n//         displayFormSendPassword: true,\n//         resetPassword: url.resetPassword,\n//       });\n//     }\n//   }\n\n//   /**\n//    * Function On Click Button Modal\n//    */\n//   onClickButtonModal(event, status) {\n//     event.preventDefault();\n\n//     const { flowRecoveryPassword } = this.state;\n\n//     if (!status) {\n//       this.setState({\n//         displayModal: false,\n//         displayFormSendEmail: false,\n//         displayFormSuccessEmail: false,\n//         displayFormSendPassword: false,\n//         displayFormSuccessPassword: false,\n//         loader: false,\n//         email: \"\",\n//         password: \"\",\n//         confirmPassword: \"\",\n//         errorMessage: \"\",\n//         hash: \"\",\n//       });\n//       return;\n//     }\n\n//     if (flowRecoveryPassword) {\n//       this.setState({\n//         displayModal: true,\n//         displayFormSendPassword: true,\n//       });\n//       return;\n//     }\n\n//     this.setState({\n//       displayModal: true,\n//       displayFormSendEmail: true,\n//     });\n//   }\n\n//   /**\n//    * Function Handle Change Form Send Email\n//    * @param {obj} event\n//    */\n//   handleChangeFormSendEmail(event) {\n//     this.setState({ email: event.target.value, errorMessage: \"\" });\n//   }\n\n//   /**\n//    * Function Handle Submit Form Send Email\n//    * @param {obj} event\n//    */\n//   async handleSubmitFormSendEmail(event) {\n//     event.preventDefault();\n\n//     const { email } = this.state;\n\n//     const validator = validatorEmail(email);\n\n//     if (!validator.status) {\n//       this.setState({ errorMessage: validator.message });\n//       return;\n//     }\n\n//     this.setState({ loader: true });\n\n//     const sendFormEmail = await sendForgotPassword(validator.email);\n\n//     if (!sendFormEmail.status) {\n//       this.setState({ errorMessage: sendFormEmail.message, loader: false });\n//       return;\n//     }\n\n//     this.setState({\n//       loader: false,\n//       displayFormSendEmail: false,\n//       displayFormSuccessEmail: true,\n//     });\n//   }\n\n//   /**\n//    * Function Handle Change Form Send Password\n//    * @param {obj} event\n//    */\n//   handleChangeFormSendPassword(event) {\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//       errorMessage: \"\",\n//     });\n//   }\n\n//   /**\n//    * Function Handle Submit Form Send Password\n//    * @param {obj} event\n//    */\n//   async handleSubmitFormSendPassword(event) {\n//     event.preventDefault();\n\n//     const { password, confirmPassword, resetPassword } = this.state;\n\n//     const validatorIdenticalPass = validatorIdenticalPassword(\n//       password,\n//       confirmPassword\n//     );\n\n//     if (!validatorIdenticalPass.status) {\n//       this.setState({ errorMessage: validatorIdenticalPass.message });\n//       return;\n//     }\n\n//     const validatePassword = validatorPassword(password);\n\n//     if (!validatePassword.status) {\n//       this.setState({ errorMessage: validatePassword.message });\n//       return;\n//     }\n\n//     this.setState({ loader: true });\n\n//     const sendPassConfirmPass = await sendChangePassword(\n//       resetPassword,\n//       validatePassword.password\n//     );\n\n//     if (!sendPassConfirmPass.status) {\n//       this.setState({\n//         errorMessage: sendPassConfirmPass.message,\n//         loader: false,\n//       });\n//       return;\n//     }\n\n//     this.setState({\n//       displayFormSendPassword: false,\n//       displayFormSuccessPassword: true,\n//       loader: false,\n//     });\n//   }\n\n//   /**\n//    * Render Component\n//    */\n//   render() {\n//     return (\n//       <>\n//         {this.state.flowRecoveryPassword ? (\n//           <a\n//             href=\"/#\"\n//             onClick={(event) => this.onClickButtonModal(event, true)}\n//             className=\"bt-plan\"\n//           >\n//             Trocar minha senha\n//           </a>\n//         ) : (\n//           <a\n//             onClick={(event) => this.onClickButtonModal(event, true)}\n//             href=\"/#\"\n//             className=\"recover-pass\"\n//           >\n//             Esqueci minha senha\n//           </a>\n//         )}\n\n//         {this.state.displayModal !== false && (\n//           <ModalTemplate>\n//             <Loader display={this.state.loader} />\n\n//             {this.state.displayFormSendEmail !== false && (\n//               <FormSendEmail\n//                 email={this.state.email}\n//                 displayFormSendEmail={this.state.displayFormSendEmail}\n//                 onChange={(event) => this.handleChangeFormSendEmail(event)}\n//                 onSubmit={(event) => this.handleSubmitFormSendEmail(event)}\n//               />\n//             )}\n\n//             {this.state.displayFormSuccessEmail !== false && (\n//               <FormSuccesslEmail email={this.state.email} />\n//             )}\n\n//             {this.state.displayFormSendPassword !== false && (\n//               <FormSendPassword\n//                 password={this.state.password}\n//                 confirmPassword={this.state.confirmPassword}\n//                 onChange={(event) => this.handleChangeFormSendPassword(event)}\n//                 onSubmit={(event) => this.handleSubmitFormSendPassword(event)}\n//               />\n//             )}\n\n//             {this.state.displayFormSuccessPassword !== false && (\n//               <FormSuccessPassword />\n//             )}\n\n//             {this.state.errorMessage !== \"\" && (\n//               <AlertsErrors message={this.state.errorMessage} />\n//             )}\n\n//             <a\n//               href=\"/#\"\n//               className=\"bt-register\"\n//               onClick={(event) => this.onClickButtonModal(event, false)}\n//             >\n//               Voltar\n//             </a>\n//           </ModalTemplate>\n//         )}\n//       </>\n//     );\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}