{"ast":null,"code":"var _jsxFileName = \"/home/arthur.donato/Documentos/ProjetoClash/batata/src/components/Modal/RegisterData/index.js\";\n\n/* eslint-disable no-unused-vars */\nimport React, { Component } from \"react\";\nimport queryString from \"query-string\";\nimport { ModalTemplate, FormRegisterData, Loader, AlertsErrors, FormSuccessData } from \"../../../components\";\nimport { validatorEmail, validatorPassword, validatorCPF, validatorIdenticalPassword } from \"../../../utils\";\nimport { sendMergeAccount, getMergeAccount } from \"../../../services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ModalRegisterData extends Component {\n  /**\n   * Constructor\n   * @param {obj} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayModal: false,\n      displayFormSendPhone: false,\n      displayFormValidatePincode: false,\n      displayFormSuccessData: false,\n      displayFormRegisterData: false,\n      displaySuccessMergeAccount: false,\n      loader: false,\n      countResendPincode: 60,\n      phone: \"\",\n      email: \"\",\n      password: \"\",\n      cpf: \"\",\n      confirmPassword: \"\",\n      errorMessage: \"\",\n      pinCode: \"\",\n      idToken: \"\",\n      transactionId: \"\"\n    };\n    this.baseState = this.state;\n  }\n  /**\n   * Component Did Mount\n   */\n\n\n  componentDidMount() {\n    const params = queryString.parse(window.location.search);\n\n    if (params.confirmToken) {\n      this.getMergeAccount(params.confirmToken);\n    }\n  }\n  /**\n   * Function Get Merge Account\n   * @param {json} token\n   */\n\n\n  async getMergeAccount(token) {\n    const getMergeAccountResponse = await getMergeAccount(token);\n\n    if (!getMergeAccountResponse.status) {\n      this.setState({\n        displayModal: true,\n        errorMessage: getMergeAccountResponse.message,\n        loader: false\n      });\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormSuccessData: true,\n      displaySuccessMergeAccount: true\n    });\n  }\n  /**\n   * Function On Click Button Modal\n   * @param {obj} event\n   * @param {bool} status\n   */\n\n\n  onClickButtonModal(event, status) {\n    event.preventDefault();\n\n    if (!status) {\n      this.setState(this.baseState);\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormRegisterData: true\n    });\n  }\n  /**\n   * Function On Click Button Change Number\n   * @param {obj} event\n   */\n  //   onClickButtonChangeNumber(event) {\n  //     event.preventDefault();\n  //     this.setState({\n  //       displayFormSendPhone: true,\n  //       displayFormValidatePincode: false,\n  //     });\n  //   }\n\n  /**\n   * Function Handle Change Form Send Phone\n   * @param {obj} event\n   */\n  //   handleChangeFormSendPhone(event) {\n  //     this.setState({ phone: event.target.value, errorMessage: \"\" });\n  //   }\n\n  /**\n   * Function Handle Submit Form Send Phone\n   * @param {obj} event\n   */\n  //   async handleSubmitFormSendPhone(event) {\n  //     event.preventDefault();\n  //     const { phone } = this.state;\n  //     const validator = validatorPhoneNumber(phone);\n  //     if (!validator.status) {\n  //       this.setState({ errorMessage: validator.message });\n  //       return;\n  //     }\n  //     this.setState({ loader: true });\n  //     const sendFormPhone = await sendPincode(validator.phone);\n  //     if (!sendFormPhone.status) {\n  //       this.setState({ errorMessage: sendFormPhone.message, loader: false });\n  //       return;\n  //     }\n  //     this.showCountSendPincode();\n  //     this.setState({\n  //       loader: false,\n  //       displayFormSendPhone: false,\n  //       displayFormValidatePincode: true,\n  //       transactionId: sendFormPhone.transactionId,\n  //     });\n  //   }\n\n  /**\n   * Function Handle Change Form Validate Pincode\n   * @param {obj} event\n   */\n  //   handleChangeFormValidatePincode(event) {\n  //     this.setState({\n  //       [event.target.name]: event.target.value,\n  //       errorMessage: \"\",\n  //     });\n  //   }\n\n  /**\n   * Function Handle Submit Form Validate Pincode\n   * @param {obj} event\n   */\n  //   async handleSubmitFormValidatePincode(event) {\n  //     event.preventDefault();\n  //     const { pinCode, transactionId } = this.state;\n  //     const validator = validatorPincode(pinCode);\n  //     if (!validator.status) {\n  //       this.setState({ errorMessage: validator.message });\n  //       return;\n  //     }\n  //     this.setState({ loader: true });\n  //     const sendFormCode = await validatePincode(\n  //       validator.pincode,\n  //       transactionId\n  //     );\n  //     if (!sendFormCode.status) {\n  //       this.setState({ errorMessage: sendFormCode.message, loader: false });\n  //       return;\n  //     }\n  //     const sendAuthorize = await authorization(sendFormCode.fsAuthToken);\n  //     if (!sendAuthorize.status) {\n  //       this.setState({ errorMessage: sendAuthorize.message, loader: false });\n  //       return;\n  //     }\n  //     const sendVerifyCustomToken = await verifyCustomToken(\n  //       sendAuthorize.customToken\n  //     );\n  //     if (!sendVerifyCustomToken.status) {\n  //       this.setState({ errorMessage: sendAuthorize.message, loader: false });\n  //       return;\n  //     }\n  //     this.setState({\n  //       displayFormValidatePincode: false,\n  //       displayFormRegisterData: true,\n  //       loader: false,\n  //       idToken: sendVerifyCustomToken.idToken,\n  //     });\n  //   }\n\n  /**\n   * Function Handle Change Form Register Data\n   * @param {obj} event\n   */\n\n\n  handleChangeFormRegisterData(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      errorMessage: \"\"\n    });\n  }\n  /**\n   * Functiom Handle Submit Form Register Data\n   * @param {obj} event\n   */\n\n\n  async handleSubmitFormRegisterData(event) {\n    event.preventDefault();\n    const {\n      email,\n      cpf,\n      password,\n      confirmPassword,\n      idToken\n    } = this.state;\n    const validatorCpf = validatorCPF(cpf);\n\n    if (!validatorCpf.status) {\n      this.setState({\n        errorMessage: validatorCpf.message\n      });\n      return;\n    }\n\n    const validatorMail = validatorEmail(email);\n\n    if (!validatorMail.status) {\n      this.setState({\n        errorMessage: validatorMail.message\n      });\n      return;\n    }\n\n    const validatorIdenticalPass = validatorIdenticalPassword(password, confirmPassword);\n\n    if (!validatorIdenticalPass.status) {\n      this.setState({\n        errorMessage: validatorIdenticalPass.message\n      });\n      return;\n    }\n\n    const validatorPass = validatorPassword(password);\n\n    if (!validatorPass.status) {\n      this.setState({\n        errorMessage: validatorPass.message\n      });\n      return;\n    }\n\n    this.setState({\n      loader: true\n    });\n    const sendFormRegisterData = await sendMergeAccount(idToken, validatorIdenticalPass.password, validatorCpf.cpf, validatorMail.email);\n\n    if (!sendFormRegisterData.status) {\n      this.setState({\n        errorMessage: sendFormRegisterData.message,\n        loader: false\n      });\n      return;\n    }\n\n    this.setState({\n      displayFormRegisterData: false,\n      displayFormSuccessData: true,\n      loader: false\n    });\n  }\n  /**\n   * Function On Click Button Resend Email\n   * @param {obj} event\n   */\n\n\n  onClickButtonResendEmail(event) {\n    event.preventDefault();\n    this.setState({\n      displayFormRegisterData: true,\n      displayFormSuccessData: false\n    });\n  } //   showCountSendPincode() {\n  //     const intervalId = setInterval(() => {\n  //       let count = this.state.countResendPincode - 1;\n  //       if (count >= 1) {\n  //         this.setState({\n  //           countResendPincode: count,\n  //         });\n  //       } else {\n  //         clearInterval(intervalId);\n  //         this.setState({\n  //           countResendPincode: 60,\n  //         });\n  //       }\n  //     }, 1000);\n  //   }\n\n  /**\n   * Render Component\n   */\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: event => this.onClickButtonModal(event, true),\n        href: \"/#\",\n        className: \"bt-register\",\n        children: \"Criar Cadastro\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), this.state.displayModal !== false && /*#__PURE__*/_jsxDEV(ModalTemplate, {\n        children: [/*#__PURE__*/_jsxDEV(Loader, {\n          display: this.state.loader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this), this.state.displayFormRegisterData !== false && /*#__PURE__*/_jsxDEV(FormRegisterData, {\n          email: this.state.email,\n          password: this.state.password,\n          cpf: this.state.cpf,\n          confirmPassword: this.state.confirmPassword,\n          onChange: event => this.handleChangeFormRegisterData(event),\n          onSubmit: event => this.handleSubmitFormRegisterData(event)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 15\n        }, this), this.state.displayFormSuccessData !== false && /*#__PURE__*/_jsxDEV(FormSuccessData, {\n          displaySuccessMergeAccount: this.state.displaySuccessMergeAccount,\n          onClick: event => this.onClickButtonResendEmail(event),\n          email: this.state.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 15\n        }, this), this.state.errorMessage !== \"\" && /*#__PURE__*/_jsxDEV(AlertsErrors, {\n          message: this.state.errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/#\",\n          className: \"go-back\",\n          onClick: event => this.onClickButtonModal(event, false),\n          children: \"Voltar para o login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/arthur.donato/Documentos/ProjetoClash/batata/src/components/Modal/RegisterData/index.js"],"names":["React","Component","queryString","ModalTemplate","FormRegisterData","Loader","AlertsErrors","FormSuccessData","validatorEmail","validatorPassword","validatorCPF","validatorIdenticalPassword","sendMergeAccount","getMergeAccount","ModalRegisterData","constructor","props","state","displayModal","displayFormSendPhone","displayFormValidatePincode","displayFormSuccessData","displayFormRegisterData","displaySuccessMergeAccount","loader","countResendPincode","phone","email","password","cpf","confirmPassword","errorMessage","pinCode","idToken","transactionId","baseState","componentDidMount","params","parse","window","location","search","confirmToken","token","getMergeAccountResponse","status","setState","message","onClickButtonModal","event","preventDefault","handleChangeFormRegisterData","target","name","value","handleSubmitFormRegisterData","validatorCpf","validatorMail","validatorIdenticalPass","validatorPass","sendFormRegisterData","onClickButtonResendEmail","render"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { Component } from \"react\";\nimport queryString from \"query-string\";\n\nimport {\n  ModalTemplate,  \n  FormRegisterData,  \n  Loader,\n  AlertsErrors,\n  FormSuccessData\n} from \"../../../components\";\n\nimport {  \n  validatorEmail,\n  validatorPassword,\n  validatorCPF,\n  validatorIdenticalPassword,\n} from \"../../../utils\";\n\nimport {\n  sendMergeAccount,\n  getMergeAccount,\n} from \"../../../services\";\n\nexport default class ModalRegisterData extends Component {\n  /**\n   * Constructor\n   * @param {obj} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayModal: false,\n      displayFormSendPhone: false,\n      displayFormValidatePincode: false,\n      displayFormSuccessData: false,\n      displayFormRegisterData: false,\n      displaySuccessMergeAccount: false,\n      loader: false,\n      countResendPincode: 60,\n      phone: \"\",\n      email: \"\",\n      password: \"\",\n      cpf: \"\",\n      confirmPassword: \"\",\n      errorMessage: \"\",\n      pinCode: \"\",\n      idToken: \"\",\n      transactionId: \"\",\n    };\n\n    this.baseState = this.state;\n  }\n\n  /**\n   * Component Did Mount\n   */\n  componentDidMount() {\n    const params = queryString.parse(window.location.search);\n    if (params.confirmToken) {\n      this.getMergeAccount(params.confirmToken);\n    }\n  }\n\n  /**\n   * Function Get Merge Account\n   * @param {json} token\n   */\n  async getMergeAccount(token) {\n    const getMergeAccountResponse = await getMergeAccount(token);\n\n    if (!getMergeAccountResponse.status) {\n      this.setState({\n        displayModal: true,\n        errorMessage: getMergeAccountResponse.message,\n        loader: false,\n      });\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormSuccessData: true,\n      displaySuccessMergeAccount: true,\n    });\n  }\n\n  /**\n   * Function On Click Button Modal\n   * @param {obj} event\n   * @param {bool} status\n   */\n  onClickButtonModal(event, status) {\n    event.preventDefault();\n\n    if (!status) {\n      this.setState(this.baseState);\n      return;\n    }\n\n    this.setState({\n      displayModal: true,\n      displayFormRegisterData: true,\n    });\n  }\n\n  /**\n   * Function On Click Button Change Number\n   * @param {obj} event\n   */\n//   onClickButtonChangeNumber(event) {\n//     event.preventDefault();\n\n//     this.setState({\n//       displayFormSendPhone: true,\n//       displayFormValidatePincode: false,\n//     });\n//   }\n\n  /**\n   * Function Handle Change Form Send Phone\n   * @param {obj} event\n   */\n//   handleChangeFormSendPhone(event) {\n//     this.setState({ phone: event.target.value, errorMessage: \"\" });\n//   }\n\n  /**\n   * Function Handle Submit Form Send Phone\n   * @param {obj} event\n   */\n//   async handleSubmitFormSendPhone(event) {\n//     event.preventDefault();\n\n//     const { phone } = this.state;\n\n//     const validator = validatorPhoneNumber(phone);\n\n//     if (!validator.status) {\n//       this.setState({ errorMessage: validator.message });\n//       return;\n//     }\n\n//     this.setState({ loader: true });\n\n//     const sendFormPhone = await sendPincode(validator.phone);\n\n//     if (!sendFormPhone.status) {\n//       this.setState({ errorMessage: sendFormPhone.message, loader: false });\n//       return;\n//     }\n\n//     this.showCountSendPincode();\n\n//     this.setState({\n//       loader: false,\n//       displayFormSendPhone: false,\n//       displayFormValidatePincode: true,\n//       transactionId: sendFormPhone.transactionId,\n//     });\n//   }\n\n  /**\n   * Function Handle Change Form Validate Pincode\n   * @param {obj} event\n   */\n//   handleChangeFormValidatePincode(event) {\n//     this.setState({\n//       [event.target.name]: event.target.value,\n//       errorMessage: \"\",\n//     });\n//   }\n\n  /**\n   * Function Handle Submit Form Validate Pincode\n   * @param {obj} event\n   */\n//   async handleSubmitFormValidatePincode(event) {\n//     event.preventDefault();\n\n//     const { pinCode, transactionId } = this.state;\n\n//     const validator = validatorPincode(pinCode);\n\n//     if (!validator.status) {\n//       this.setState({ errorMessage: validator.message });\n//       return;\n//     }\n\n//     this.setState({ loader: true });\n\n//     const sendFormCode = await validatePincode(\n//       validator.pincode,\n//       transactionId\n//     );\n\n//     if (!sendFormCode.status) {\n//       this.setState({ errorMessage: sendFormCode.message, loader: false });\n//       return;\n//     }\n\n//     const sendAuthorize = await authorization(sendFormCode.fsAuthToken);\n\n//     if (!sendAuthorize.status) {\n//       this.setState({ errorMessage: sendAuthorize.message, loader: false });\n//       return;\n//     }\n\n//     const sendVerifyCustomToken = await verifyCustomToken(\n//       sendAuthorize.customToken\n//     );\n\n//     if (!sendVerifyCustomToken.status) {\n//       this.setState({ errorMessage: sendAuthorize.message, loader: false });\n//       return;\n//     }\n\n//     this.setState({\n//       displayFormValidatePincode: false,\n//       displayFormRegisterData: true,\n//       loader: false,\n//       idToken: sendVerifyCustomToken.idToken,\n//     });\n//   }\n\n  /**\n   * Function Handle Change Form Register Data\n   * @param {obj} event\n   */\n  handleChangeFormRegisterData(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n      errorMessage: \"\",\n    });\n  }\n\n  /**\n   * Functiom Handle Submit Form Register Data\n   * @param {obj} event\n   */\n  async handleSubmitFormRegisterData(event) {\n    event.preventDefault();\n\n    const { email, cpf, password, confirmPassword, idToken } = this.state;\n\n    const validatorCpf = validatorCPF(cpf);\n\n    if (!validatorCpf.status) {\n      this.setState({ errorMessage: validatorCpf.message });\n      return;\n    }\n\n    const validatorMail = validatorEmail(email);\n\n    if (!validatorMail.status) {\n      this.setState({ errorMessage: validatorMail.message });\n      return;\n    }\n\n    const validatorIdenticalPass = validatorIdenticalPassword(\n      password,\n      confirmPassword\n    );\n\n    if (!validatorIdenticalPass.status) {\n      this.setState({ errorMessage: validatorIdenticalPass.message });\n      return;\n    }\n\n    const validatorPass = validatorPassword(password);\n\n    if (!validatorPass.status) {\n      this.setState({ errorMessage: validatorPass.message });\n      return;\n    }\n\n    this.setState({ loader: true });\n\n    const sendFormRegisterData = await sendMergeAccount(\n      idToken,\n      validatorIdenticalPass.password,\n      validatorCpf.cpf,\n      validatorMail.email\n    );\n\n    if (!sendFormRegisterData.status) {\n      this.setState({\n        errorMessage: sendFormRegisterData.message,\n        loader: false,\n      });\n      return;\n    }\n\n    this.setState({\n      displayFormRegisterData: false,\n      displayFormSuccessData: true,\n      loader: false,\n    });\n  }\n\n  /**\n   * Function On Click Button Resend Email\n   * @param {obj} event\n   */\n  onClickButtonResendEmail(event) {\n    event.preventDefault();\n\n    this.setState({\n      displayFormRegisterData: true,\n      displayFormSuccessData: false,\n    });\n  }\n\n//   showCountSendPincode() {\n//     const intervalId = setInterval(() => {\n//       let count = this.state.countResendPincode - 1;\n//       if (count >= 1) {\n//         this.setState({\n//           countResendPincode: count,\n//         });\n//       } else {\n//         clearInterval(intervalId);\n//         this.setState({\n//           countResendPincode: 60,\n//         });\n//       }\n//     }, 1000);\n//   }\n\n  /**\n   * Render Component\n   */\n  render() {\n    return (\n      <React.Fragment>\n        <a\n          onClick={(event) => this.onClickButtonModal(event, true)}\n          href=\"/#\"\n          className=\"bt-register\"\n        >\n          Criar Cadastro\n        </a>\n        {this.state.displayModal !== false && (\n          <ModalTemplate>\n            <Loader display={this.state.loader} />\n\n            {/* {this.state.displayFormSendPhone !== false && (\n              <FormSendPhone\n                displayFormSendPhone={this.state.displayFormSendPhone}\n                phone={this.state.phone}\n                onChange={(event) => this.handleChangeFormSendPhone(event)}\n                onSubmit={(event) => this.handleSubmitFormSendPhone(event)}\n              />\n            )} */}\n\n            {/* {this.state.displayFormValidatePincode !== false && (\n              <FormValidatePincode\n                phone={this.state.phone}\n                countResendPincode={this.state.countResendPincode}\n                pinCode={this.state.pinCode}\n                onClickButtonChangeNumber={(event) =>\n                  this.onClickButtonChangeNumber(event)\n                }\n                onChange={(event) =>\n                  this.handleChangeFormValidatePincode(event)\n                }\n                onSubmit={(event) =>\n                  this.handleSubmitFormValidatePincode(event)\n                }\n              />\n            )} */}\n\n            {this.state.displayFormRegisterData !== false && (\n              <FormRegisterData\n                email={this.state.email}\n                password={this.state.password}\n                cpf={this.state.cpf}\n                confirmPassword={this.state.confirmPassword}\n                onChange={(event) => this.handleChangeFormRegisterData(event)}\n                onSubmit={(event) => this.handleSubmitFormRegisterData(event)}\n              />\n            )}\n\n            {this.state.displayFormSuccessData !== false && (\n              <FormSuccessData\n                displaySuccessMergeAccount={\n                  this.state.displaySuccessMergeAccount\n                }\n                onClick={(event) => this.onClickButtonResendEmail(event)}\n                email={this.state.email}\n              />\n            )}\n            {this.state.errorMessage !== \"\" && (\n              <AlertsErrors message={this.state.errorMessage} />\n            )}\n\n            <a\n              href=\"/#\"\n              className=\"go-back\"\n              onClick={(event) => this.onClickButtonModal(event, false)}\n            >\n              Voltar para o login\n            </a>\n          </ModalTemplate>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}