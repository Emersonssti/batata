{"ast":null,"code":"import IP from \"ip\";\nimport Bowser from \"bowser\";\nimport JWT from \"jsonwebtoken\";\nimport { deCrypto } from \"../../utils\";\n/**\n * Function Authorize Token\n */\n\nexport const isAuthorizated = () => {\n  const ip = IP.address();\n  const token = localStorage.getItem(\"token\");\n  const browserParse = Bowser.getParser(window.navigator.userAgent);\n  const browser = browserParse.getBrowserName();\n  return JWT.verify(token, function (err, decoded) {\n    if (err) {\n      localStorage.removeItem(\"token\");\n      return false;\n    }\n\n    const response = deCrypto(decoded.data);\n\n    if (!(browser === response.browser) && ip === response.ip) {\n      localStorage.removeItem(\"token\");\n      return false;\n    }\n\n    return true;\n  });\n};","map":{"version":3,"sources":["/home/arthur.donato/Documentos/ProjetoClash/batata/src/utils/Validator/Token/index.js"],"names":["IP","Bowser","JWT","deCrypto","isAuthorizated","ip","address","token","localStorage","getItem","browserParse","getParser","window","navigator","userAgent","browser","getBrowserName","verify","err","decoded","removeItem","response","data"],"mappings":"AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAGA,SAASC,QAAT,QAAyB,aAAzB;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,QAAMC,EAAE,GAAGL,EAAE,CAACM,OAAH,EAAX;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,YAAY,GAAGT,MAAM,CAACU,SAAP,CAAiBC,MAAM,CAACC,SAAP,CAAiBC,SAAlC,CAArB;AACA,QAAMC,OAAO,GAAGL,YAAY,CAACM,cAAb,EAAhB;AAEA,SAAOd,GAAG,CAACe,MAAJ,CAAWV,KAAX,EAAmB,UAAUW,GAAV,EAAeC,OAAf,EAAwB;AAChD,QAAID,GAAJ,EAAS;AACPV,MAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACA,aAAO,KAAP;AACD;;AAED,UAAMC,QAAQ,GAAGlB,QAAQ,CAACgB,OAAO,CAACG,IAAT,CAAzB;;AAEA,QAAI,EAAEP,OAAO,KAAKM,QAAQ,CAACN,OAAvB,KAAmCV,EAAE,KAAKgB,QAAQ,CAAChB,EAAvD,EAA2D;AACzDG,MAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAdM,CAAP;AAeD,CArBM","sourcesContent":["import IP from \"ip\";\nimport Bowser from \"bowser\";\nimport JWT from \"jsonwebtoken\";\n\n\nimport { deCrypto } from \"../../utils\";\n\n/**\n * Function Authorize Token\n */\nexport const isAuthorizated = () => {\n  const ip = IP.address();\n  const token = localStorage.getItem(\"token\");\n  const browserParse = Bowser.getParser(window.navigator.userAgent);\n  const browser = browserParse.getBrowserName();\n\n  return JWT.verify(token , function (err, decoded) {\n    if (err) {\n      localStorage.removeItem(\"token\");\n      return false;\n    }\n\n    const response = deCrypto(decoded.data);\n\n    if (!(browser === response.browser) && ip === response.ip) {\n      localStorage.removeItem(\"token\");\n      return false;\n    }\n\n    return true;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}